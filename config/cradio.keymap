/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "keymap_italian.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define LAYER_BASE 0
#define LAYER_NAV  1
#define LAYER_NUM  2
#define LAYER_SYM  3
#define LAYER_SET  4

// Key definitions

#define POS_LH_T1 30
#define POS_LH_T2 31
#define POS_LH_C1R1 4
#define POS_LH_C1R2 14
#define POS_LH_C1R3 24
#define POS_LH_C2R1 3
#define POS_LH_C2R2 13
#define POS_LH_C2R3 23
#define POS_LH_C3R1 2
#define POS_LH_C3R2 12
#define POS_LH_C3R3 22
#define POS_LH_C4R1 1
#define POS_LH_C4R2 11
#define POS_LH_C4R3 21
#define POS_LH_C5R1 0
#define POS_LH_C5R2 10
#define POS_LH_C5R3 20
#define POS_RH_T1 32
#define POS_RH_T2 33
#define POS_RH_C1R1 5
#define POS_RH_C1R2 15
#define POS_RH_C1R3 25
#define POS_RH_C2R1 6
#define POS_RH_C2R2 16
#define POS_RH_C2R3 26
#define POS_RH_C3R1 7
#define POS_RH_C3R2 17
#define POS_RH_C3R3 27
#define POS_RH_C4R1 8
#define POS_RH_C4R2 18
#define POS_RH_C4R3 28
#define POS_RH_C5R1 9
#define POS_RH_C5R2 19
#define POS_RH_C5R3 29
#define KEYS_LEFT POS_LH_C1R1 4  POS_LH_C1R2 14  POS_LH_C1R3 24  POS_LH_C2R1 3  POS_LH_C2R2 13  POS_LH_C2R3 23  POS_LH_C3R1 2  POS_LH_C3R2 12  POS_LH_C3R3 22  POS_LH_C4R1 1  POS_LH_C4R2 11  POS_LH_C4R3 21  POS_LH_C5R1 0  POS_LH_C5R2 10  POS_LH_C5R3 20
#define KEYS_RIGHT POS_RH_C1R1 4  POS_RH_C1R2 14  POS_RH_C1R3 24  POS_RH_C2R1 3  POS_RH_C2R2 13  POS_RH_C2R3 23  POS_RH_C3R1 2  POS_RH_C3R2 12  POS_RH_C3R3 22  POS_RH_C4R1 1  POS_RH_C4R2 11  POS_RH_C4R3 21  POS_RH_C5R1 0  POS_RH_C5R2 10  POS_RH_C5R3 20
#define THUMBS POS_LH_T1 POS_LH_T2 POS_RH_T1 POS_RH_T2

// -----------------

&mt {
    //  flavor = "tap-preferred";
    // tapping_term_ms = <200>;
};

&sk { ignore-modifiers; };

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        rpi: require_prior_idle {
            compatible = "zmk,behavior-hold-tap";
            label = "REQUIRE_PRIOR_IDLE";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <175>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        hml: hold_tap_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_HOLD_TAP_LEFT";
            flavor = "tap-preferred";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_RIGHT THUMBS>;
            hold-trigger-on-release;
        };

        hmr: hold_tap_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_HOLD_TAP_RIGHT";
            flavor = "tap-preferred";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_LEFT THUMBS>;
            hold-trigger-on-release;
        };

        qt: quick_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "QUICK_TAP";
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            hold-trigger-on-release;
        };

        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
        };

        hold_temp_layer: hold_temp_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TEMP_LAYER";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
        };

        ht_pref_hold: ht_pref_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_PREF_HOLD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <150>;
            flavor = "hold-preferred";
            retro-tap;
        };

        sticky_tap: sticky_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_TAP";
            bindings = <&mo>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "tap-preferred";
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        escape-combo {
            bindings = <&kp ESC>;
            key-positions = <13 11>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <11 12>;
        };

        enter-right {
            bindings = <&kp ENTER>;
            key-positions = <17 18>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <16 17>;
        };

        delete {
            bindings = <&kp DEL>;
            key-positions = <13 12>;
        };

        capsword {
            bindings = <&caps_word>;
            key-positions = <16 18>;
        };

        space-left {
            bindings = <&kp LC(LEFT)>;
            key-positions = <11 2>;
            require-prior-idle-ms = <400>;
        };

        space-right {
            bindings = <&kp LC(RIGHT)>;
            key-positions = <13 2>;
            require-prior-idle-ms = <400>;
        };

        tab-prev {
            bindings = <&kp LC(GRAVE)>;
            key-positions = <21 12>;
        };

        tab-next {
            bindings = <&kp LC(TAB)>;
            key-positions = <23 12>;
        };

        volume-up {
            bindings = <&kp C_VOLUME_UP>;
            key-positions = <5 6>;
        };

        volume-down {
            bindings = <&kp C_VOL_DN>;
            key-positions = <25 26>;
        };

        play-pause {
            bindings = <&kp C_PLAY_PAUSE>;
            key-positions = <15 16>;
        };

        settings-layer {
            bindings = <&sl LAYER_SET>;
            key-positions = <30 33>;
        };

        cut {
            bindings = <&kp LG(X)>;
            key-positions = <21 23>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <21 22>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <23 22>;
        };

        hyphen {
            bindings = <&kp MINUS>;
            key-positions = <27 26>;
        };

        homerow-open {
            bindings = <&kp LG(LS(SPACE))>;
            key-positions = <13 16>;
        };

        find-app {
            bindings = <&kp LC(SPACE)>;
            key-positions = <12 17>;
        };

        screenshot {
            bindings = <&kp LS(LG(NUMBER_4))>;
            key-positions = <0 3>;
        };
    };

    macros {
        typedef: typedef {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp UNDER &kp T>;
            label = "TYPEDEF";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // Base alpha layer

        default_layer {
            bindings = <
&kp Q            &kp W                &kp E            &kp R              &kp T                           &kp Y               &kp U               &kp I                &kp O                  &kp P
&hml LEFT_GUI A  &kp S                &lt LAYER_NUM D  &lt LAYER_SYM F    &kp G                           &kp H               &lt LAYER_SYM J     &lt 2 K              &kp L                  &kp SQT
&hml LEFT_GUI Z  &hml LEFT_CONTROL X  &hml LEFT_ALT C  &hml LEFT_SHIFT V  &kp B                           &kp N               &hmr LEFT_SHIFT M   &hmr LEFT_ALT COMMA  &hmr LEFT_CONTROL DOT  &hmr LEFT_GUI SLASH
                                                       &lt 1 BACKSPACE    &ht_pref_hold LEFT_SHIFT TAB    &ht LEFT_GUI SPACE  &ht LEFT_ALT ENTER
            >;
        };

        nav {
            bindings = <
&kp LC(LEFT)  &kp LC(GRAVE)     &kp LC(TAB)         &kp LC(RIGHT)  &kp PG_UP    &none   &kp PG_UP     &kp LG(UP_ARROW)  &kp PG_DN    &none
&kp LEFT      &kp UP_ARROW      &kp DOWN            &kp RIGHT      &kp PG_DN    &none   &kp LC(LEFT)  &kp LC(GRAVE)     &kp LC(TAB)  &kp LC(RIGHT)
&kp LG(LEFT)  &kp LG(UP_ARROW)  &kp LG(DOWN_ARROW)  &kp LG(RIGHT)  &none        &none   &none         &none             &none        &none
                                                    &trans         &trans       &trans  &trans
            >;
        };

        num {
            bindings = <
&kp PLUS          &kp MINUS          &kp ASTERISK          &kp SLASH              &kp EQUAL    &kp PERCENT  &kp N1    &kp N2  &kp N3  &kp COLON
&kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp CARET    &kp DOLLAR   &kp N4    &kp N5  &kp N6  &kp N0
&kp LEFT          &kp UP             &kp DOWN              &kp RIGHT              &none        &typedef     &kp N7    &kp N8  &kp N9  &kp DOT
                                                           &trans                 &trans       &kp N0       &typedef
            >;
        };

        symbols {
            bindings = <
&kp COLON      &kp SEMICOLON     &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PLUS     &kp TILDE  &kp EXCLAMATION  &kp AT_SIGN   &kp HASH       &kp DOUBLE_QUOTES
&kp UNDER      &kp MINUS         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp EQUAL    &kp PIPE   &kp DOLLAR       &kp PERCENT   &kp CARET      &kp QUESTION
&kp LESS_THAN  &kp GREATER_THAN  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &none        &kp GRAVE  &kp AMPERSAND    &kp ASTERISK  &kp BACKSLASH  &kp SLASH
                                                       &kp LEFT               &kp RIGHT    &trans     &trans
            >;
        };

        settings_layer {
            bindings = <
&sys_reset   &trans  &trans  &trans      &bt BT_SEL 0    &trans  &trans  &trans  &trans  &sys_reset
&bootloader  &trans  &trans  &trans      &bt BT_SEL 1    &trans  &trans  &trans  &trans  &bootloader
&trans       &trans  &trans  &bt BT_CLR  &bt BT_SEL 2    &trans  &trans  &trans  &trans  &trans
                             &trans      &trans          &trans  &trans
            >;
        };

        layer_move {
            bindings = <
&trans  &trans  &trans         &trans         &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LC(LEFT)   &kp LC(RIGHT)  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LC(GRAVE)  &kp LC(TAB)    &trans    &trans  &trans  &trans  &trans  &trans
                               &trans         &trans    &trans  &trans
            >;
        };
    };
};
