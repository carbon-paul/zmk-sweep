/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "keymap_italian.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

// Key definitions
#define POS_LH_T1 30
#define POS_LH_T2 31
#define POS_LH_C1R1 4
#define POS_LH_C1R2 14
#define POS_LH_C1R3 24
#define POS_LH_C2R1 3
#define POS_LH_C2R2 13
#define POS_LH_C2R3 23
#define POS_LH_C3R1 2
#define POS_LH_C3R2 12
#define POS_LH_C3R3 22
#define POS_LH_C4R1 1
#define POS_LH_C4R2 11
#define POS_LH_C4R3 21
#define POS_LH_C5R1 0
#define POS_LH_C5R2 10
#define POS_LH_C5R3 20
#define POS_RH_T1 32
#define POS_RH_T2 33
#define POS_RH_C1R1 5
#define POS_RH_C1R2 15
#define POS_RH_C1R3 25
#define POS_RH_C2R1 6
#define POS_RH_C2R2 16
#define POS_RH_C2R3 26
#define POS_RH_C3R1 7
#define POS_RH_C3R2 17
#define POS_RH_C3R3 27
#define POS_RH_C4R1 8
#define POS_RH_C4R2 18
#define POS_RH_C4R3 28
#define POS_RH_C5R1 9
#define POS_RH_C5R2 19
#define POS_RH_C5R3 29

#define KEYS_LEFT POS_LH_C1R1 4  POS_LH_C1R2 14  POS_LH_C1R3 24  POS_LH_C2R1 3  POS_LH_C2R2 13  POS_LH_C2R3 23  POS_LH_C3R1 2  POS_LH_C3R2 12  POS_LH_C3R3 22  POS_LH_C4R1 1  POS_LH_C4R2 11  POS_LH_C4R3 21  POS_LH_C5R1 0  POS_LH_C5R2 10  POS_LH_C5R3 20
#define KEYS_RIGHT POS_RH_C1R1 4  POS_RH_C1R2 14  POS_RH_C1R3 24  POS_RH_C2R1 3  POS_RH_C2R2 13  POS_RH_C2R3 23  POS_RH_C3R1 2  POS_RH_C3R2 12  POS_RH_C3R3 22  POS_RH_C4R1 1  POS_RH_C4R2 11  POS_RH_C4R3 21  POS_RH_C5R1 0  POS_RH_C5R2 10  POS_RH_C5R3 20
#define THUMBS POS_LH_T1 POS_LH_T2 POS_RH_T1 POS_RH_T2

// -----------------

&mt {
    //  flavor = "tap-preferred";
    // tapping_term_ms = <200>;
};

&sk { ignore-modifiers; };

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        rpi: require_prior_idle {
            compatible = "zmk,behavior-hold-tap";
            label = "REQUIRE_PRIOR_IDLE";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <175>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        hml: hold_tap_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_HOLD_TAP_LEFT";
            flavor = "tap-preferred";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_RIGHT THUMBS>;
            hold-trigger-on-release;
        };

        hmr: hold_tap_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_HOLD_TAP_RIGHT";
            flavor = "tap-preferred";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_LEFT THUMBS>;
            hold-trigger-on-release;
        };

        qt: quick_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "QUICK_TAP";
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            hold-trigger-on-release;
        };

        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <100>;
        };

        hold_temp_layer: hold_temp_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TEMP_LAYER";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
        };
    };
};

/ {
    macros {
    };

    combos {
        compatible = "zmk,combos";

        escape-combo {
            bindings = <&kp ESC>;
            key-positions = <20 23>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <11 12>;
        };

        enter-right {
            bindings = <&kp ENTER>;
            key-positions = <17 18>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <27 28>;
        };

        delete {
            bindings = <&kp DEL>;
            key-positions = <13 12>;
        };

        capsword {
            bindings = <&caps_word>;
            key-positions = <26 27>;
        };

        space-left {
            bindings = <&kp LC(LEFT)>;
            key-positions = <1 2>;
            require-prior-idle-ms = <200>;
        };

        space-right {
            bindings = <&kp LC(RIGHT)>;
            key-positions = <2 3>;
            require-prior-idle-ms = <200>;
        };

        tab-prev {
            bindings = <&kp LC(GRAVE)>;
            key-positions = <21 22>;
        };

        tab-next {
            bindings = <&kp LC(TAB)>;
            key-positions = <22 23>;
        };

        delete-word {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <11 12 13>;
        };

        volume-up {
            bindings = <&kp C_VOLUME_UP>;
            key-positions = <5 15>;
        };

        volume-down {
            bindings = <&kp C_VOL_DN>;
            key-positions = <25 15>;
        };

        play-pause {
            bindings = <&kp C_PLAY_PAUSE>;
            key-positions = <5 25>;
        };

        colon-combo {
            bindings = <&kp COLON>;
            key-positions = <0 10>;
        };

        semicolon-combo {
            bindings = <&kp SEMICOLON>;
            key-positions = <10 20>;
        };

        hyphen-combo {
            bindings = <&kp MINUS>;
            key-positions = <1 11>;
        };

        underscore-combo {
            bindings = <&kp UNDERSCORE>;
            key-positions = <21 11>;
        };

        parenth-left-combo {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <2 12>;
        };

        parenth-right-combo {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <12 22>;
        };

        bracket-left-combo {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <3 13>;
        };

        bracket-right-combo {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <13 23>;
        };

        brace-left {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <4 14>;
        };

        brace-right {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <14 24>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // Base alpha layer

        default_layer {
            bindings = <
&kp Q            &kp W                &kp E            &kp R                 &kp T              &kp Y                &kp U              &kp I            &kp O                &kp P
&hml LEFT_GUI A  &hml LEFT_CONTROL S  &hml LEFT_ALT D  &hml LEFT_SHIFT F     &ht LC(SPACE) G    &ht LS(LG(SPACE)) H  &hmr LEFT_SHIFT J  &hmr LEFT_ALT K  &hmr LEFT_CONTROL L  &hmr LEFT_GUI SQT
&kp Z            &kp X                &kp C            &kp V                 &kp B              &kp N                &kp M              &kp COMMA        &kp DOT              &kp SLASH
                                                       &hold_temp_layer 1 1  &sk LEFT_SHIFT     &kp SPACE            &sl 2
            >;
        };

        num_nav {
            bindings = <
&trans        &trans     &kp UP     &trans         &trans     &kp PERCENT     &kp N5     &kp N2  &kp N3  &kp COLON
&kp HOME      &kp LEFT   &kp DOWN   &kp RIGHT      &kp END    &kp DOLLAR      &kp N4     &kp N5  &kp N6  &kp N0
&kp LG(LEFT)  &kp PG_UP  &kp PG_DN  &kp LG(RIGHT)  &trans     &kp UNDERSCORE  &kp MINUS  &kp N8  &kp N9  &kp DOT
                                    &trans         &trans     &trans          &trans
            >;
        };

        symbols {
            bindings = <
&kp SEMI       &kp COLON         &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PLUS     &kp TILDE  &kp EXCLAMATION  &kp AT_SIGN   &kp LCTRL             &kp DOUBLE_QUOTES
&kp MINUS      &kp UNDERSCORE    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp EQUAL    &kp PIPE   &kp DOLLAR       &kp PERCENT   &kp CARET             &kp QUESTION
&kp LESS_THAN  &kp GREATER_THAN  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &none        &kp GRAVE  &kp AMPERSAND    &kp ASTERISK  &kp NON_US_BACKSLASH  &kp SLASH
                                                       &trans                 &trans       &trans     &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                        &trans  &trans    &trans  &trans
            >;
        };

        // Numbers and high frequency symbols
        // Main modifiers and arrow keys
        // Function keys with modifiers
        // Low frequency symbols.
        // Used to type regional accents.
        // Used to change the keyboard's settings.num_nav {};
    };
};
